

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";





SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."expenses" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "amount" real NOT NULL,
    "title" character varying NOT NULL,
    "bill_id" "uuid" NOT NULL,
    "paid_by" bigint
);


ALTER TABLE "public"."expenses" OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."upsert_expense"("expense_data" "public"."expenses", "participant_ids" bigint[]) RETURNS SETOF "public"."expenses"
    LANGUAGE "plpgsql"
    AS $$DECLARE
  participant_id bigint;
  new_expense_id bigint;
BEGIN
  -- Perform UPSERT for the expense
  IF expense_data.id IS NULL THEN
    -- Insert if no ID provided
    INSERT INTO expenses (title, amount, paid_by, bill_id)
    VALUES (
      expense_data.title,
      expense_data.amount,
      expense_data.paid_by,
      expense_data.bill_id
    )
    RETURNING id INTO new_expense_id;
  ELSE
    -- Update if ID provided
    UPDATE expenses
    SET amount = expense_data.amount,
        title = expense_data.title,
        paid_by = expense_data.paid_by,
        bill_id = expense_data.bill_id
    WHERE id = expense_data.id
    RETURNING id INTO new_expense_id;
  END IF;

  -- Delete existing participants
  DELETE FROM expenses_participants
  WHERE expense_id = new_expense_id;

  -- Insert new participants
  FOREACH participant_id IN ARRAY participant_ids LOOP
    INSERT INTO expenses_participants (expense_id, participant_id)
    VALUES (new_expense_id, participant_id);
  END LOOP;

  -- Return the updated/inserted expense
  RETURN QUERY SELECT * FROM expenses WHERE id = new_expense_id;
END;$$;


ALTER FUNCTION "public"."upsert_expense"("expense_data" "public"."expenses", "participant_ids" bigint[]) OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."bills" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "title" character varying DEFAULT ''::character varying NOT NULL,
    "user_id" "uuid" NOT NULL
);


ALTER TABLE "public"."bills" OWNER TO "postgres";


ALTER TABLE "public"."expenses" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."expense_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."expenses_participants" (
    "expense_id" bigint NOT NULL,
    "participant_id" bigint NOT NULL
);


ALTER TABLE "public"."expenses_participants" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."participants" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" character varying NOT NULL,
    "bill_id" "uuid" NOT NULL
);


ALTER TABLE "public"."participants" OWNER TO "postgres";


ALTER TABLE "public"."participants" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."participant_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."bills"
    ADD CONSTRAINT "bill_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."expenses"
    ADD CONSTRAINT "expense_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."expenses_participants"
    ADD CONSTRAINT "expenses_participants_pkey" PRIMARY KEY ("expense_id", "participant_id");



ALTER TABLE ONLY "public"."participants"
    ADD CONSTRAINT "participant_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."bills"
    ADD CONSTRAINT "bill_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."expenses"
    ADD CONSTRAINT "expense_bill_id_fkey" FOREIGN KEY ("bill_id") REFERENCES "public"."bills"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."expenses"
    ADD CONSTRAINT "expense_paid_by_fkey" FOREIGN KEY ("paid_by") REFERENCES "public"."participants"("id") ON DELETE SET NULL;



ALTER TABLE ONLY "public"."expenses_participants"
    ADD CONSTRAINT "expense_participant_participant_id_fkey" FOREIGN KEY ("participant_id") REFERENCES "public"."participants"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."expenses_participants"
    ADD CONSTRAINT "expenses_participants_expense_id_fkey" FOREIGN KEY ("expense_id") REFERENCES "public"."expenses"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."participants"
    ADD CONSTRAINT "participant_bill_id_fkey" FOREIGN KEY ("bill_id") REFERENCES "public"."bills"("id") ON DELETE CASCADE;



CREATE POLICY "Enable delete for authenticated users only" ON "public"."expenses_participants" FOR DELETE TO "authenticated" USING (true);



CREATE POLICY "Enable delete for owned expenses" ON "public"."expenses" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") IN ( SELECT "bills"."user_id"
   FROM "public"."bills"
  WHERE ("expenses"."bill_id" = "bills"."id"))));



CREATE POLICY "Enable delete for owned participants" ON "public"."participants" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") IN ( SELECT "bills"."user_id"
   FROM "public"."bills"
  WHERE ("participants"."bill_id" = "bills"."id"))));



CREATE POLICY "Enable insert for authenticated users only" ON "public"."bills" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "public"."expenses" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "public"."expenses_participants" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "public"."participants" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable read access for all users" ON "public"."bills" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."expenses" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."expenses_participants" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."participants" FOR SELECT USING (true);



CREATE POLICY "Enable update for authenticated users only" ON "public"."expenses_participants" FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);



CREATE POLICY "Enable update for owned expenses" ON "public"."expenses" FOR UPDATE USING ((( SELECT "auth"."uid"() AS "uid") IN ( SELECT "bills"."user_id"
   FROM "public"."bills"
  WHERE ("bills"."id" = "expenses"."bill_id"))));



CREATE POLICY "Enable update for owned participants" ON "public"."participants" FOR UPDATE USING ((( SELECT "auth"."uid"() AS "uid") IN ( SELECT "bills"."user_id"
   FROM "public"."bills"
  WHERE ("participants"."bill_id" = "bills"."id"))));



CREATE POLICY "Enable update for users based on user_id" ON "public"."bills" FOR UPDATE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id")) WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



ALTER TABLE "public"."bills" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."expenses" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."expenses_participants" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."participants" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";




















































































































































































GRANT ALL ON TABLE "public"."expenses" TO "anon";
GRANT ALL ON TABLE "public"."expenses" TO "authenticated";
GRANT ALL ON TABLE "public"."expenses" TO "service_role";



GRANT ALL ON FUNCTION "public"."upsert_expense"("expense_data" "public"."expenses", "participant_ids" bigint[]) TO "anon";
GRANT ALL ON FUNCTION "public"."upsert_expense"("expense_data" "public"."expenses", "participant_ids" bigint[]) TO "authenticated";
GRANT ALL ON FUNCTION "public"."upsert_expense"("expense_data" "public"."expenses", "participant_ids" bigint[]) TO "service_role";


















GRANT ALL ON TABLE "public"."bills" TO "anon";
GRANT ALL ON TABLE "public"."bills" TO "authenticated";
GRANT ALL ON TABLE "public"."bills" TO "service_role";



GRANT ALL ON SEQUENCE "public"."expense_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."expense_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."expense_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."expenses_participants" TO "anon";
GRANT ALL ON TABLE "public"."expenses_participants" TO "authenticated";
GRANT ALL ON TABLE "public"."expenses_participants" TO "service_role";



GRANT ALL ON TABLE "public"."participants" TO "anon";
GRANT ALL ON TABLE "public"."participants" TO "authenticated";
GRANT ALL ON TABLE "public"."participants" TO "service_role";



GRANT ALL ON SEQUENCE "public"."participant_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."participant_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."participant_id_seq" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
